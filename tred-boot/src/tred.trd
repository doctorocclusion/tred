def Expr Single List;
def Comment Str;
def Name Str;
def Tuple Name List;
def Regex Str;
def StrLiteral Str;
def Block List

let white_m {
	/[\s\n\r]*/;
};

let blank_m {
	/[\s\n\r]+/;
};

let name_m {
	not "_";
	let val: Str;
	capture val;
	/[\w_]+/;
	export Name(val);
};

let tuple_m {
	not "_";
	let name: Str;
	capture name;
	/[\w_]+/;
	capture nul;

	let args: List;
	into args;
	"(";
	many {
		value_m;
	} blank_m;
	")";

	into super;
	export Tuple(Name(name), args);
}

let strlit_m {
    /"/;
	let val Str;
	capture val;
	// TODO ecapes in strings
	/[^"]/;
	export StrLiteral(val);
	/"/;
}

let regex_m {
	"/";
	let val Str;
	capture val;
	// TODO slashes in regexes
	many {
		not "/";
		/./;
	};
	export Regex(val);
	"/";
}

let block_m {
	let exps List;
	into exps;
	"{";
	many { line_m; };
	"}";

	into super;
	export exps;
}

let comment_m {;
	"//";
	/ */;
	let com Str;
	capture com;
	/[^\n]*/;
	export Comment(com);
	/\n/;
};

let value_m {
	or strlit_m regex_m block_m tuple_m name_m;
}

let exp_m {
	let op Single;
	into op;
	value_m;

	let args List;
	into args;
	many {
		blank_m;
		value_m;
	};

	white_m;
	";";

	into super;
	export Expr(op args);
};

let line_m {
	or blank_m comment_m exp_m;
}

many { line_m; };